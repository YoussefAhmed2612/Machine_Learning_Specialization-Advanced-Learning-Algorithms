{"cells":[{"source":"<a href=\"https://www.kaggle.com/code/youssefahmed2612/forward-propagation-in-numpy?scriptVersionId=254519892\" target=\"_blank\"><img align=\"left\" alt=\"Kaggle\" title=\"Open in Kaggle\" src=\"https://kaggle.com/static/images/open-in-kaggle.svg\"></a>","metadata":{},"cell_type":"markdown"},{"cell_type":"markdown","id":"963b969a","metadata":{"papermill":{"duration":0.003895,"end_time":"2025-08-06T07:19:04.629256","exception":false,"start_time":"2025-08-06T07:19:04.625361","status":"completed"},"tags":[]},"source":["# Implementing Forward Propagation "]},{"cell_type":"code","execution_count":1,"id":"41e1e7c4","metadata":{"_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","execution":{"iopub.execute_input":"2025-08-06T07:19:04.637457Z","iopub.status.busy":"2025-08-06T07:19:04.636932Z","iopub.status.idle":"2025-08-06T07:19:24.861867Z","shell.execute_reply":"2025-08-06T07:19:24.860938Z"},"papermill":{"duration":20.230832,"end_time":"2025-08-06T07:19:24.863564","exception":false,"start_time":"2025-08-06T07:19:04.632732","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["2025-08-06 07:19:08.723465: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n","WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n","E0000 00:00:1754464748.983683      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n","E0000 00:00:1754464749.063186      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"]}],"source":["import pandas as pd\n","import numpy as np\n","import math\n","import matplotlib.pyplot as plt\n","import tensorflow as tf"]},{"cell_type":"code","execution_count":2,"id":"9c5b5d1e","metadata":{"execution":{"iopub.execute_input":"2025-08-06T07:19:24.87206Z","iopub.status.busy":"2025-08-06T07:19:24.871518Z","iopub.status.idle":"2025-08-06T07:19:24.892507Z","shell.execute_reply":"2025-08-06T07:19:24.891686Z"},"papermill":{"duration":0.026961,"end_time":"2025-08-06T07:19:24.894234","exception":false,"start_time":"2025-08-06T07:19:24.867273","status":"completed"},"tags":[]},"outputs":[],"source":["df = pd.read_csv('/kaggle/input/coffee-roasting/CoffeeRoasting.csv')\n","\n","x = np.array(df.iloc[:,:-1])\n","y = np.array(df.iloc[:,-1])"]},{"cell_type":"code","execution_count":3,"id":"671ccc85","metadata":{"execution":{"iopub.execute_input":"2025-08-06T07:19:24.902025Z","iopub.status.busy":"2025-08-06T07:19:24.901716Z","iopub.status.idle":"2025-08-06T07:19:24.906192Z","shell.execute_reply":"2025-08-06T07:19:24.905365Z"},"papermill":{"duration":0.010074,"end_time":"2025-08-06T07:19:24.907654","exception":false,"start_time":"2025-08-06T07:19:24.89758","status":"completed"},"tags":[]},"outputs":[],"source":["def sigmoid(x):\n","    exp_neg_x = math.exp(-x)\n","    denominator = 1 + exp_neg_x\n","    result = 1 / denominator\n","    return result"]},{"cell_type":"markdown","id":"ce8ed4b3","metadata":{"papermill":{"duration":0.002913,"end_time":"2025-08-06T07:19:24.91398","exception":false,"start_time":"2025-08-06T07:19:24.911067","status":"completed"},"tags":[]},"source":["Normalize data using Tensorlflow Normalization Layer"]},{"cell_type":"code","execution_count":4,"id":"ce794eca","metadata":{"execution":{"iopub.execute_input":"2025-08-06T07:19:24.921544Z","iopub.status.busy":"2025-08-06T07:19:24.921185Z","iopub.status.idle":"2025-08-06T07:19:25.089207Z","shell.execute_reply":"2025-08-06T07:19:25.088189Z"},"papermill":{"duration":0.173669,"end_time":"2025-08-06T07:19:25.090794","exception":false,"start_time":"2025-08-06T07:19:24.917125","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["Temperature Max, Min pre normalization: 284.99, 151.32\n","Duration    Max, Min pre normalization: 15.45, 11.51\n","Temperature Max, Min post normalization: 1.66, -1.69\n","Duration    Max, Min post normalization: 1.79, -1.70\n"]},{"name":"stderr","output_type":"stream","text":["2025-08-06 07:19:25.006347: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"]}],"source":["print(f\"Temperature Max, Min pre normalization: {np.max(x[:,0]):0.2f}, {np.min(x[:,0]):0.2f}\")\n","print(f\"Duration    Max, Min pre normalization: {np.max(x[:,1]):0.2f}, {np.min(x[:,1]):0.2f}\")\n","norm_l = tf.keras.layers.Normalization(axis=-1)\n","norm_l.adapt(x)  # learns mean, variance\n","xn = norm_l(x)\n","print(f\"Temperature Max, Min post normalization: {np.max(xn[:,0]):0.2f}, {np.min(xn[:,0]):0.2f}\")\n","print(f\"Duration    Max, Min post normalization: {np.max(xn[:,1]):0.2f}, {np.min(xn[:,1]):0.2f}\")"]},{"cell_type":"markdown","id":"744093d7","metadata":{"papermill":{"duration":0.003019,"end_time":"2025-08-06T07:19:25.097509","exception":false,"start_time":"2025-08-06T07:19:25.09449","status":"completed"},"tags":[]},"source":["Next, you will define the `my_dense()` function which computes the activations of a dense layer."]},{"cell_type":"code","execution_count":5,"id":"f07de788","metadata":{"execution":{"iopub.execute_input":"2025-08-06T07:19:25.106063Z","iopub.status.busy":"2025-08-06T07:19:25.105376Z","iopub.status.idle":"2025-08-06T07:19:25.110649Z","shell.execute_reply":"2025-08-06T07:19:25.109788Z"},"papermill":{"duration":0.010813,"end_time":"2025-08-06T07:19:25.111997","exception":false,"start_time":"2025-08-06T07:19:25.101184","status":"completed"},"tags":[]},"outputs":[],"source":["def my_dense(a_in, W, b):\n","    units = W.shape[1]\n","    a_out = np.zeros(units)\n","    for j in range(units):               \n","        w = W[:,j]                                    \n","        z = np.dot(w, a_in) + b[j]         \n","        a_out[j] = sigmoid(z)               \n","    return(a_out)"]},{"cell_type":"markdown","id":"5f2f1a17","metadata":{"papermill":{"duration":0.003077,"end_time":"2025-08-06T07:19:25.118529","exception":false,"start_time":"2025-08-06T07:19:25.115452","status":"completed"},"tags":[]},"source":["The following cell builds a two-layer neural network utilizing the `my_dense` subroutine above.\n"]},{"cell_type":"code","execution_count":6,"id":"f9bf58ba","metadata":{"execution":{"iopub.execute_input":"2025-08-06T07:19:25.126306Z","iopub.status.busy":"2025-08-06T07:19:25.125952Z","iopub.status.idle":"2025-08-06T07:19:25.130647Z","shell.execute_reply":"2025-08-06T07:19:25.12973Z"},"papermill":{"duration":0.01044,"end_time":"2025-08-06T07:19:25.132118","exception":false,"start_time":"2025-08-06T07:19:25.121678","status":"completed"},"tags":[]},"outputs":[],"source":["def my_sequential(x, W1, b1, W2, b2):\n","    a1 = my_dense(x,  W1, b1)\n","    a2 = my_dense(a1, W2, b2)\n","    return(a2)"]},{"cell_type":"markdown","id":"a313855f","metadata":{"papermill":{"duration":0.002949,"end_time":"2025-08-06T07:19:25.139762","exception":false,"start_time":"2025-08-06T07:19:25.136813","status":"completed"},"tags":[]},"source":["We can copy trained weights and biases from a previous Project"]},{"cell_type":"code","execution_count":7,"id":"32641a1e","metadata":{"execution":{"iopub.execute_input":"2025-08-06T07:19:25.147139Z","iopub.status.busy":"2025-08-06T07:19:25.146818Z","iopub.status.idle":"2025-08-06T07:19:25.151954Z","shell.execute_reply":"2025-08-06T07:19:25.151084Z"},"papermill":{"duration":0.010377,"end_time":"2025-08-06T07:19:25.15326","exception":false,"start_time":"2025-08-06T07:19:25.142883","status":"completed"},"tags":[]},"outputs":[],"source":["W1_tmp = np.array( [[-8.93,  0.29, 12.9 ],\n","                    [-0.1,  -7.32, 10.81]] )\n","b1_tmp = np.array( [-9.82, -9.28,  0.96] )\n","W2_tmp = np.array( [[-31.18],\n","                    [-27.59],\n","                    [-32.56]] )\n","b2_tmp = np.array( [15.41] )"]},{"cell_type":"markdown","id":"42784cfb","metadata":{"papermill":{"duration":0.002977,"end_time":"2025-08-06T07:19:25.159562","exception":false,"start_time":"2025-08-06T07:19:25.156585","status":"completed"},"tags":[]},"source":["### Predictions\n","\n","Once you have a trained model, you can then use it to make predictions. Recall that the output of our model is a probability. In this case, the probability of a good roast. To make a decision, one must apply the probability to a threshold. In this case, we will use 0.5"]},{"cell_type":"markdown","id":"7d3f8e7d","metadata":{"papermill":{"duration":0.003231,"end_time":"2025-08-06T07:19:25.165927","exception":false,"start_time":"2025-08-06T07:19:25.162696","status":"completed"},"tags":[]},"source":["Let's start by writing a routine similar to Tensorflow's `model.predict()`. This will take a matrix $X$ with all $m$ examples in the rows and make a prediction by running the model."]},{"cell_type":"code","execution_count":8,"id":"3bfe183f","metadata":{"execution":{"iopub.execute_input":"2025-08-06T07:19:25.173585Z","iopub.status.busy":"2025-08-06T07:19:25.173224Z","iopub.status.idle":"2025-08-06T07:19:25.179077Z","shell.execute_reply":"2025-08-06T07:19:25.178149Z"},"papermill":{"duration":0.011518,"end_time":"2025-08-06T07:19:25.180526","exception":false,"start_time":"2025-08-06T07:19:25.169008","status":"completed"},"tags":[]},"outputs":[],"source":["def my_predict(X, W1, b1, W2, b2):\n","    m = X.shape[0]\n","    p = np.zeros((m,1))\n","    for i in range(m):\n","        p[i,0] = my_sequential(X[i], W1, b1, W2, b2)\n","    return(p)"]},{"cell_type":"markdown","id":"a087a10b","metadata":{"papermill":{"duration":0.003189,"end_time":"2025-08-06T07:19:25.187759","exception":false,"start_time":"2025-08-06T07:19:25.18457","status":"completed"},"tags":[]},"source":["We can try this routine on two examples:"]},{"cell_type":"code","execution_count":9,"id":"720575c7","metadata":{"execution":{"iopub.execute_input":"2025-08-06T07:19:25.195563Z","iopub.status.busy":"2025-08-06T07:19:25.195173Z","iopub.status.idle":"2025-08-06T07:19:25.208736Z","shell.execute_reply":"2025-08-06T07:19:25.207747Z"},"papermill":{"duration":0.019305,"end_time":"2025-08-06T07:19:25.210358","exception":false,"start_time":"2025-08-06T07:19:25.191053","status":"completed"},"tags":[]},"outputs":[{"name":"stderr","output_type":"stream","text":["/tmp/ipykernel_13/3168763570.py:5: DeprecationWarning: Conversion of an array with ndim > 0 to a scalar is deprecated, and will error in future. Ensure you extract a single element from your array before performing this operation. (Deprecated NumPy 1.25.)\n","  p[i,0] = my_sequential(X[i], W1, b1, W2, b2)\n"]}],"source":["X_tst = np.array([\n","    [200,13.9],  # postive example\n","    [200,17]])   # negative example\n","X_tstn = norm_l(X_tst)  # remember to normalize\n","predictions = my_predict(X_tstn, W1_tmp, b1_tmp, W2_tmp, b2_tmp)"]},{"cell_type":"code","execution_count":10,"id":"a44867e7","metadata":{"execution":{"iopub.execute_input":"2025-08-06T07:19:25.218484Z","iopub.status.busy":"2025-08-06T07:19:25.217751Z","iopub.status.idle":"2025-08-06T07:19:25.223115Z","shell.execute_reply":"2025-08-06T07:19:25.222272Z"},"papermill":{"duration":0.010924,"end_time":"2025-08-06T07:19:25.22462","exception":false,"start_time":"2025-08-06T07:19:25.213696","status":"completed"},"tags":[]},"outputs":[{"name":"stdout","output_type":"stream","text":["decisions = \n","[[1.]\n"," [0.]]\n"]}],"source":["yhat = np.zeros_like(predictions)\n","for i in range(len(predictions)):\n","    if predictions[i] >= 0.5:\n","        yhat[i] = 1\n","    else:\n","        yhat[i] = 0\n","print(f\"decisions = \\n{yhat}\")"]}],"metadata":{"kaggle":{"accelerator":"none","dataSources":[{"datasetId":8003947,"sourceId":12665827,"sourceType":"datasetVersion"}],"dockerImageVersionId":31089,"isGpuEnabled":false,"isInternetEnabled":true,"language":"python","sourceType":"notebook"},"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.11.13"},"papermill":{"default_parameters":{},"duration":28.105443,"end_time":"2025-08-06T07:19:28.03816","environment_variables":{},"exception":null,"input_path":"__notebook__.ipynb","output_path":"__notebook__.ipynb","parameters":{},"start_time":"2025-08-06T07:18:59.932717","version":"2.6.0"}},"nbformat":4,"nbformat_minor":5}