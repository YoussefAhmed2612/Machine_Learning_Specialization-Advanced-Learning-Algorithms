{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "5844cb12",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-06T07:26:05.266126Z",
     "iopub.status.busy": "2025-08-06T07:26:05.265824Z",
     "iopub.status.idle": "2025-08-06T07:26:24.769894Z",
     "shell.execute_reply": "2025-08-06T07:26:24.768946Z"
    },
    "papermill": {
     "duration": 19.511563,
     "end_time": "2025-08-06T07:26:24.771615",
     "exception": false,
     "start_time": "2025-08-06T07:26:05.260052",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-06 07:26:08.912998: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:477] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n",
      "WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\n",
      "E0000 00:00:1754465169.140085      13 cuda_dnn.cc:8310] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n",
      "E0000 00:00:1754465169.209265      13 cuda_blas.cc:1418] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd \n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "26782e4f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T07:26:24.781815Z",
     "iopub.status.busy": "2025-08-06T07:26:24.780853Z",
     "iopub.status.idle": "2025-08-06T07:26:24.799543Z",
     "shell.execute_reply": "2025-08-06T07:26:24.798621Z"
    },
    "papermill": {
     "duration": 0.025487,
     "end_time": "2025-08-06T07:26:24.801343",
     "exception": false,
     "start_time": "2025-08-06T07:26:24.775856",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "df = pd.read_csv(\"/kaggle/input/coffee-roasting/CoffeeRoasting.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "5f7f5027",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T07:26:24.811172Z",
     "iopub.status.busy": "2025-08-06T07:26:24.810828Z",
     "iopub.status.idle": "2025-08-06T07:26:24.821180Z",
     "shell.execute_reply": "2025-08-06T07:26:24.820307Z"
    },
    "papermill": {
     "duration": 0.017079,
     "end_time": "2025-08-06T07:26:24.822974",
     "exception": false,
     "start_time": "2025-08-06T07:26:24.805895",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X = np.array(df.iloc[:, :-1])\n",
    "Y = np.array(df.iloc[:,-1]).reshape(-1,1)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23d397c1",
   "metadata": {
    "papermill": {
     "duration": 0.003703,
     "end_time": "2025-08-06T07:26:24.830772",
     "exception": false,
     "start_time": "2025-08-06T07:26:24.827069",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Normalize Data\n",
    "Fitting the weights to the data will proceed more quickly if the data is normalized.\n",
    "The procedure below uses a Keras [normalization layer](https://keras.io/api/layers/preprocessing_layers/numerical/normalization/). It has the following steps:\n",
    "- create a \"Normalization Layer\". Note, as applied here, this is not a layer in your model.\n",
    "- 'adapt' the data. This learns the mean and variance of the data set and saves the values internally.\n",
    "- normalize the data.  \n",
    "It is important to apply normalization to any future data that utilizes the learned model."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "90efe979",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T07:26:24.840003Z",
     "iopub.status.busy": "2025-08-06T07:26:24.839308Z",
     "iopub.status.idle": "2025-08-06T07:26:24.929989Z",
     "shell.execute_reply": "2025-08-06T07:26:24.928999Z"
    },
    "papermill": {
     "duration": 0.096926,
     "end_time": "2025-08-06T07:26:24.931441",
     "exception": false,
     "start_time": "2025-08-06T07:26:24.834515",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Temperature Max, Min pre normalization: 284.99, 151.32\n",
      "Duration    Max, Min pre normalization: 15.45, 11.51\n",
      "Temperature Max, Min post normalization: 1.66, -1.69\n",
      "Duration    Max, Min post normalization: 1.79, -1.70\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-08-06 07:26:24.846749: E external/local_xla/xla/stream_executor/cuda/cuda_driver.cc:152] failed call to cuInit: INTERNAL: CUDA error: Failed call to cuInit: UNKNOWN ERROR (303)\n"
     ]
    }
   ],
   "source": [
    "print(f\"Temperature Max, Min pre normalization: {np.max(X[:,0]):0.2f}, {np.min(X[:,0]):0.2f}\")\n",
    "print(f\"Duration    Max, Min pre normalization: {np.max(X[:,1]):0.2f}, {np.min(X[:,1]):0.2f}\")\n",
    "norm_l = tf.keras.layers.Normalization(axis=-1)\n",
    "norm_l.adapt(X)  # learns mean, variance\n",
    "Xn = norm_l(X)\n",
    "print(f\"Temperature Max, Min post normalization: {np.max(Xn[:,0]):0.2f}, {np.min(Xn[:,0]):0.2f}\")\n",
    "print(f\"Duration    Max, Min post normalization: {np.max(Xn[:,1]):0.2f}, {np.min(Xn[:,1]):0.2f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed0cf240",
   "metadata": {
    "papermill": {
     "duration": 0.003842,
     "end_time": "2025-08-06T07:26:24.939172",
     "exception": false,
     "start_time": "2025-08-06T07:26:24.935330",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Tile/copy our data to increase the training set size and reduce the number of training epochs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "10d28027",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T07:26:24.948131Z",
     "iopub.status.busy": "2025-08-06T07:26:24.947808Z",
     "iopub.status.idle": "2025-08-06T07:26:24.956801Z",
     "shell.execute_reply": "2025-08-06T07:26:24.955827Z"
    },
    "papermill": {
     "duration": 0.015142,
     "end_time": "2025-08-06T07:26:24.958176",
     "exception": false,
     "start_time": "2025-08-06T07:26:24.943034",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(200000, 2) (200000, 1)\n"
     ]
    }
   ],
   "source": [
    "Xt = np.tile(Xn,(1000,1))\n",
    "Yt= np.tile(Y,(1000,1))   \n",
    "print(Xt.shape, Yt.shape)   "
   ]
  },
  {
   "attachments": {
    "b58366f6-24e5-4588-9e67-5b7bbc6591eb.png": {
     "image/png": ""
    }
   },
   "cell_type": "markdown",
   "id": "f06c2e43",
   "metadata": {
    "papermill": {
     "duration": 0.003774,
     "end_time": "2025-08-06T07:26:24.966036",
     "exception": false,
     "start_time": "2025-08-06T07:26:24.962262",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Model\n",
    "\n",
    "![image.png](attachment:b58366f6-24e5-4588-9e67-5b7bbc6591eb.png)\n",
    "\n",
    "Let's build the \"Coffee Roasting Network\". There are two layers with sigmoid activations as shown below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "686dafd5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T07:26:24.975121Z",
     "iopub.status.busy": "2025-08-06T07:26:24.974813Z",
     "iopub.status.idle": "2025-08-06T07:26:25.015573Z",
     "shell.execute_reply": "2025-08-06T07:26:25.014739Z"
    },
    "papermill": {
     "duration": 0.047266,
     "end_time": "2025-08-06T07:26:25.017241",
     "exception": false,
     "start_time": "2025-08-06T07:26:24.969975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "tf.random.set_seed(1234)  # applied to achieve consistent results\n",
    "model = Sequential(\n",
    "    [\n",
    "        tf.keras.Input(shape=(2,)),\n",
    "        Dense(3, activation='sigmoid', name = 'layer1'),\n",
    "        Dense(1, activation='sigmoid', name = 'layer2')\n",
    "     ]\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be2f62b5",
   "metadata": {
    "papermill": {
     "duration": 0.004617,
     "end_time": "2025-08-06T07:26:25.026034",
     "exception": false,
     "start_time": "2025-08-06T07:26:25.021417",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "The `model.summary()` provides a description of the network:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "8ab8d39d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T07:26:25.035696Z",
     "iopub.status.busy": "2025-08-06T07:26:25.034700Z",
     "iopub.status.idle": "2025-08-06T07:26:25.050495Z",
     "shell.execute_reply": "2025-08-06T07:26:25.049583Z"
    },
    "papermill": {
     "duration": 0.022094,
     "end_time": "2025-08-06T07:26:25.051939",
     "exception": false,
     "start_time": "2025-08-06T07:26:25.029845",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1mModel: \"sequential\"\u001b[0m\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ layer1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">3</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">9</span> │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ layer2 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                  │ (<span style=\"color: #00d7ff; text-decoration-color: #00d7ff\">None</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">4</span> │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n",
       "</pre>\n"
      ],
      "text/plain": [
       "┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n",
       "┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n",
       "┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n",
       "│ layer1 (\u001b[38;5;33mDense\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m3\u001b[0m)              │             \u001b[38;5;34m9\u001b[0m │\n",
       "├─────────────────────────────────┼────────────────────────┼───────────────┤\n",
       "│ layer2 (\u001b[38;5;33mDense\u001b[0m)                  │ (\u001b[38;5;45mNone\u001b[0m, \u001b[38;5;34m1\u001b[0m)              │             \u001b[38;5;34m4\u001b[0m │\n",
       "└─────────────────────────────────┴────────────────────────┴───────────────┘\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">13</span> (52.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Total params: \u001b[0m\u001b[38;5;34m13\u001b[0m (52.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">13</span> (52.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m13\u001b[0m (52.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/html": [
       "<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n",
       "</pre>\n"
      ],
      "text/plain": [
       "\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "model.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "863b27ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T07:26:25.062345Z",
     "iopub.status.busy": "2025-08-06T07:26:25.061958Z",
     "iopub.status.idle": "2025-08-06T07:26:25.067147Z",
     "shell.execute_reply": "2025-08-06T07:26:25.066132Z"
    },
    "papermill": {
     "duration": 0.011867,
     "end_time": "2025-08-06T07:26:25.068524",
     "exception": false,
     "start_time": "2025-08-06T07:26:25.056657",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "L1 params =  9 , L2 params =  4\n"
     ]
    }
   ],
   "source": [
    "L1_num_params = 2 * 3 + 3   # W1 parameters  + b1 parameters\n",
    "L2_num_params = 3 * 1 + 1   # W2 parameters  + b2 parameters\n",
    "print(\"L1 params = \", L1_num_params, \", L2 params = \", L2_num_params  )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "1bf392bb",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T07:26:25.079037Z",
     "iopub.status.busy": "2025-08-06T07:26:25.078744Z",
     "iopub.status.idle": "2025-08-06T07:26:25.090882Z",
     "shell.execute_reply": "2025-08-06T07:26:25.089930Z"
    },
    "papermill": {
     "duration": 0.019076,
     "end_time": "2025-08-06T07:26:25.092313",
     "exception": false,
     "start_time": "2025-08-06T07:26:25.073237",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "W1(2, 3):\n",
      " [[ 0.29850256  0.10497749  0.03442121]\n",
      " [-0.63780296  0.21937037 -0.9966063 ]] \n",
      "b1(3,): [0. 0. 0.]\n",
      "W2(3, 1):\n",
      " [[0.46543765]\n",
      " [0.7249596 ]\n",
      " [1.0093652 ]] \n",
      "b2(1,): [0.]\n"
     ]
    }
   ],
   "source": [
    "W1, b1 = model.get_layer(\"layer1\").get_weights()\n",
    "W2, b2 = model.get_layer(\"layer2\").get_weights()\n",
    "print(f\"W1{W1.shape}:\\n\", W1, f\"\\nb1{b1.shape}:\", b1)\n",
    "print(f\"W2{W2.shape}:\\n\", W2, f\"\\nb2{b2.shape}:\", b2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4e9fb5b7",
   "metadata": {
    "papermill": {
     "duration": 0.004633,
     "end_time": "2025-08-06T07:26:25.101606",
     "exception": false,
     "start_time": "2025-08-06T07:26:25.096973",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "- The `model.compile` statement defines a loss function and specifies a compile optimization.\n",
    "- The `model.fit` statement runs gradient descent and fits the weights to the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "4d8c407e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T07:26:25.112175Z",
     "iopub.status.busy": "2025-08-06T07:26:25.111857Z",
     "iopub.status.idle": "2025-08-06T07:27:56.219544Z",
     "shell.execute_reply": "2025-08-06T07:27:56.218322Z"
    },
    "papermill": {
     "duration": 91.115303,
     "end_time": "2025-08-06T07:27:56.221372",
     "exception": false,
     "start_time": "2025-08-06T07:26:25.106069",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "\u001b[1m6250/6250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 1ms/step - loss: 0.3440\n",
      "Epoch 2/10\n",
      "\u001b[1m6250/6250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 1ms/step - loss: 0.2019\n",
      "Epoch 3/10\n",
      "\u001b[1m6250/6250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 1ms/step - loss: 0.2010\n",
      "Epoch 4/10\n",
      "\u001b[1m6250/6250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 1ms/step - loss: 0.2007\n",
      "Epoch 5/10\n",
      "\u001b[1m6250/6250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 1ms/step - loss: 0.2006\n",
      "Epoch 6/10\n",
      "\u001b[1m6250/6250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 1ms/step - loss: 0.2006\n",
      "Epoch 7/10\n",
      "\u001b[1m6250/6250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 1ms/step - loss: 0.2005\n",
      "Epoch 8/10\n",
      "\u001b[1m6250/6250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 1ms/step - loss: 0.2005\n",
      "Epoch 9/10\n",
      "\u001b[1m6250/6250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 1ms/step - loss: 0.2005\n",
      "Epoch 10/10\n",
      "\u001b[1m6250/6250\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 1ms/step - loss: 0.2005\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.history.History at 0x7b9af17042d0>"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model.compile(\n",
    "    loss = tf.keras.losses.BinaryCrossentropy(),\n",
    "    optimizer = tf.keras.optimizers.Adam(learning_rate=0.01),\n",
    ")\n",
    "\n",
    "model.fit(\n",
    "    Xt,Yt,            \n",
    "    epochs=10,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "cd5ff0b4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T07:27:56.405928Z",
     "iopub.status.busy": "2025-08-06T07:27:56.405579Z",
     "iopub.status.idle": "2025-08-06T07:27:56.413762Z",
     "shell.execute_reply": "2025-08-06T07:27:56.412796Z"
    },
    "papermill": {
     "duration": 0.102108,
     "end_time": "2025-08-06T07:27:56.415207",
     "exception": false,
     "start_time": "2025-08-06T07:27:56.313099",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "W1:\n",
      " [[ 9.996612  -4.16279   -4.459191 ]\n",
      " [ 5.2952266 -1.2709945 -7.157564 ]] \n",
      "b1: [-0.18054196 -6.4681916   2.0790675 ]\n",
      "W2:\n",
      " [[ -5.2014065]\n",
      " [-13.715103 ]\n",
      " [  5.46549  ]] \n",
      "b2: [-2.9500039]\n"
     ]
    }
   ],
   "source": [
    "W1, b1 = model.get_layer(\"layer1\").get_weights()\n",
    "W2, b2 = model.get_layer(\"layer2\").get_weights()\n",
    "print(\"W1:\\n\", W1, \"\\nb1:\", b1)\n",
    "print(\"W2:\\n\", W2, \"\\nb2:\", b2)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "384478ac",
   "metadata": {
    "papermill": {
     "duration": 0.102665,
     "end_time": "2025-08-06T07:27:56.608502",
     "exception": false,
     "start_time": "2025-08-06T07:27:56.505837",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Let's start by creating input data. The model is expecting one or more examples where examples are in the rows of matrix. In this case, we have two features so the matrix will be (m,2) where m is the number of examples.\n",
    "Recall, we have normalized the input features so we must normalize our test data as well.   \n",
    "To make a prediction, you apply the `predict` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "63b9cae5",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T07:27:56.807400Z",
     "iopub.status.busy": "2025-08-06T07:27:56.806758Z",
     "iopub.status.idle": "2025-08-06T07:27:56.959515Z",
     "shell.execute_reply": "2025-08-06T07:27:56.958438Z"
    },
    "papermill": {
     "duration": 0.260041,
     "end_time": "2025-08-06T07:27:56.961345",
     "exception": false,
     "start_time": "2025-08-06T07:27:56.701304",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 75ms/step\n",
      "predictions = \n",
      " [[6.9075489e-01]\n",
      " [2.8748738e-04]]\n"
     ]
    }
   ],
   "source": [
    "X_test = np.array([\n",
    "    [200,13.9],  # positive example\n",
    "    [200,17]])   # negative example\n",
    "X_testn = norm_l(X_test)\n",
    "predictions = model.predict(X_testn)\n",
    "print(\"predictions = \\n\", predictions)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "be2832b3",
   "metadata": {
    "papermill": {
     "duration": 0.09161,
     "end_time": "2025-08-06T07:27:57.175005",
     "exception": false,
     "start_time": "2025-08-06T07:27:57.083395",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "To convert the probabilities to a decision, we apply a threshold:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "fe8a52ed",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-06T07:27:57.358329Z",
     "iopub.status.busy": "2025-08-06T07:27:57.357995Z",
     "iopub.status.idle": "2025-08-06T07:27:57.363588Z",
     "shell.execute_reply": "2025-08-06T07:27:57.362585Z"
    },
    "papermill": {
     "duration": 0.098394,
     "end_time": "2025-08-06T07:27:57.365014",
     "exception": false,
     "start_time": "2025-08-06T07:27:57.266620",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "decisions = \n",
      "[[1]\n",
      " [0]]\n"
     ]
    }
   ],
   "source": [
    "yhat = (predictions >= 0.5).astype(int)\n",
    "print(f\"decisions = \\n{yhat}\")"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 8003947,
     "sourceId": 12665827,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 120.182619,
   "end_time": "2025-08-06T07:28:00.701630",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-06T07:26:00.519011",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
